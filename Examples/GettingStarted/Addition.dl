# Expected output: Return value of 46

# Remember, numbers are declared via their binary values
# Fundamentally variables are just a bit string, this example just uses a typical integer convention to store values
# You could define numbers as 1111 -> 4 or 11 -> 2 if you want (given appropriate functions to handle them)
num1 = 10010    # 18
num2 = 11100    # 28

# XOR function
<< ^ return param1 param2 // 
    and = param1 & param2
    or = param1 | param2
    return = or & ! and
>>

# Left shift function (note the use of the bits operator)
<< <- return param1 // ! 1 : return = param1 >>

# Addition function (recursive)
<< + return a b // 
    # If b is not 0, call an internal addition function
    ( a addInternal b ) | b = 0

    # Because we are setting to the internal function, it will set to its parameters
    return = a
>>

# Addition internal
<< addInternal return a b // return = 1 //
    # Fancy addition algorithm
    carry = a & b
    a = a ^ b
    b = <- carry

    # If B is not 0 yet, recall this function
    ( a addInternal b ) | b = 0
>>

# Call our addition function and write the result to the file name to return that value
Addition.dl = num2 + num1