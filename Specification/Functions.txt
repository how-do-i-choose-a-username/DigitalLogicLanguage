Functions are a crucial part of Digital Logic Language.

Functions definitions are specified on the main line only. A function is called like any other operator in the code. A function can have any number of parameters that it receives, and has a single return value. Functions, like operators, can be both set to and retrieved from. When setting to a function, it behaves similarly to getting a value from that function. Except, the value being set is passed via the variable which is specified as the return value normally, and setting to a function does not return a value. Functions specify separate code blocks to handle setting and getting values. When setting to a function parameters are passed by reference instead of by value, so any changes made within the function propagate to the calling scope.
To start a function definition, the << token is used. No other tokens are required in the function header. However, that's not very useful. The next token expected is the function name, followed by a manually specified function ID. If the ID is unspecified, the function is assigned a unique function ID automatically. The next token will become the return value of the function, followed by the token names of as many parameters as required.
After the function header, the // function separator token indicates that the following tokens are the next part of the function definition, which are the getter expressions. These next tokens follow all the usual rules of expressions. New lines are not necessary between function separators. Another function separator after the getter expression is then specified to indicate that the following expressions are the setter part of the function.
The function definition is then ended by the >> function definition end token. A minimal and useless function definition could be '<< >>'. Note that neither the getter nor setter sections are compulsory. However, if the setter section needs to be specified, the getter section must also be specified, but can be left blank. A less minimal, but also useless function to demonstrate this is '<< Function Return Param1 Param2 // // >>'
If a function has only two parameters, these are required to be on either side of the function token in the infix expression, same as for a dual operator. The first parameter is on the left, the second is on the right. Other than this, all parameters must be on the right hand side, in order.
If a function has three or more parameters, these must be either variables or constant values. While it may compile with operators and blocks as a parameter, it is untested functionality and liable to break. If a function has one or two parameters, these may include other functions, operators or blocks.
Functions can also be called via the reflection operator. This uses the function ID to specify which function to run. Setting a value to a function via reflection makes no modification to its parameters.
The mainline of the program is a function, has no name and an ID of 0. It is possible to retrieve a value from the mainline (the return variable is the file name), but setting a value does nothing. If a function header has a manually specified ID of 0, this will be reassigned.