Expressions are one of the basic structures in Digital Logic, and in many other languages. An expression is seperated by '='. It has a left hand side, and a right hand side. The RHS side is executed to get a value, which is then set to the LHS.
Expressions are typically seperated by new lines. If an expression does not include '=', then the tokens on that line are assumed to be the RHS of the expression, and when executed a value is retrieved from them, but never set to anywhere.
Multiple expressions on a single line can be defined, this is done using the block operator. Each expression on that line must be enclosed by a block start and a block end token. Eg '( hello = there ) ( other = expression ) ( code )'.
Either side of an expression is written in the infix format, like a normal math expression. These can include the block operators, to enclose sections of higher priority. This works at the same time as multiple expressions on a line. An example of this is 'hello = there & ( world | earth )'. 
Expressions which are written outside a function are part of the mainline, and are executed when the program is run. If an expression is specified inside a function, then that expression is run whenever that part of the function is called.
If an operator parameter, or function parameter, or either side of an expression is blank, it's assumed to be deliberate. It will always return 0, and do nothing when a value is set.