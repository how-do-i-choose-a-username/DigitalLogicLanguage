Built in operators (two basic types)
There are the solo operators, which take a single value, and dual operators which take two values, one on each side. 
All operators can have a value retrieved from them, but can also have a value set to them. Getting just retrieves a value, but when setting to an operator the values on either side are retrieved first regardless of the operator (same as with functions) before the value is actually set to them.

Solo operators
They are 'not !' and 'terminal _'
When setting to or retrieving from a not operator, it simply inverts the values of the entire bit string before passing it on.
The terminal operator is used for interaction with the user. When retrieving a character from the terminal operator the program pauses, and waits for the user to enter a character on the terminal. When the user enters the character, it is not output to the console, if this is required it must be implemented by the programmer. The user does not need to press enter to submit the character, it is immediately passed to the program which continues running. When setting to the terminal operator, it takes the bit string and interprets it as an ascii character. If this is a printable character, it is printed to the terminal. The terminal character has a single variable which can be used to set some basic flags. If you pass a bit string that has the least significant bit set to true (const value of 1), the terminal operator will always return 0, and never pause for user input. If the second bit is set to true (const value of 10) then any value set to the terminal will be ignored. The next flag (const value of 100) changes the output mode, so instead of conditionally outputting a char, it instead outputs a bit string of the value being printed, with all leading zeros trimmed. While the programmer should write this themselves, I have included it for debugging. These flags are useful when trying to compact programs to be as short as possible, because they can be used to disable functionality that is unneeded at a given time.

Dual operators
The dual operators are 'and &', 'or |', 'bits :', 'files /' and 'reflection ?'
The 'and' operator is simple. When retrieving a value from this operator, it returns the binary 'and' between its two bit strings. When setting to an 'and' operator it sets the provided value to both sides of itself.
The 'or' operator returns the boolean 'or' of both of its bit strings when being retrieved from. When setting to an or operator it gets both sides, if either side is the value being set it does nothing. If neither side has the value being set, the LHS of the or operator is set with the provided value. This can be used in conjunction with functions to conditionally run code.
The bits operator is complicated. It takes two values. The value on the LHS is the control value, and the value on the right hand side is the working value. When getting a value. The bits in the working value corresponding to those which were set to true in the control value are returned, in order, but shifted so that they fill the returning value from the right. When setting to the bits operator the process is reversed. The working value is the one that is actually set to, the control value tells the operator which bits to set to, and the value being set into the operator has the appropriate number of bits read from it, starting from the right hand side. I should make diagrams for this.
The files operator is unimplemented.
The reflection operator is complicated. When the value on its left is 0 the operator behaves like a variable, the value on the right is the global variable ID that is being set to and retried from. The global variables never overlap with manually specified variables, and are available anywhere in the program (think of it as a global unbounded array of values). When a non-zero value is on the left hand side of the reflection operator it is in function mode. The value on the right is the function ID to get from or set to. The value on the left is the first index in the global variables to start looking for parameter values. The operator starts at that index, and continues incrementing by one until it has all the parameters that it needs for that function. Reflection can be used to recursively call the mainline (since it has no name to call).